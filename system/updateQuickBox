#!/bin/bash
#
# [Quick Box :: EcoSystem Update Script]
#
# QuickLab:   https://lab.quickbox.io/QuickBox/quickbox_packages
# Local   :   ~/QuickBox/packages
# Author  :   QuickBox.io
# URL     :   https://plaza.quickbox.io
#
# QuickBox Copyright (C) 2016 QuickBox.io
# Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
#Script Console Colors
black=$(tput setaf 0); red=$(tput setaf 1); green=$(tput setaf 2); yellow=$(tput setaf 3);
blue=$(tput setaf 4); magenta=$(tput setaf 5); cyan=$(tput setaf 6); white=$(tput setaf 7);
on_red=$(tput setab 1); on_green=$(tput setab 2); on_yellow=$(tput setab 3); on_blue=$(tput setab 4);
on_magenta=$(tput setab 5); on_cyan=$(tput setab 6); on_white=$(tput setab 7); bold=$(tput bold);
dim=$(tput dim); underline=$(tput smul); reset_underline=$(tput rmul); standout=$(tput smso);
reset_standout=$(tput rmso); normal=$(tput sgr0); alert=${white}${on_red}; title=${standout};
sub_title=${bold}${yellow}; repo_title=${black}${on_green}; message_title=${white}${on_magenta}
#################################################################################
function _string() { perl -le 'print map {(a..z,A..Z,0..9)[rand 62] } 0..pop' 15 ; }
#################################################################################

function _oscheck() {
  if [[ ! -f /bin/systemctl ]]; then
    echo "Oh drats! Your system does not support systemd"
    echo "As of QuickBox 2.4.0, systemd is now required"
    echo 'Exiting...'
    exit 1
  fi
}

function _logcheck() {
  OUTTO=/srv/rutorrent/home/db/output.log
}

function _directorycheck() {
if [[ -d /root/QuickBox ]]; then
  cd /root
  find -type d -name "quickbox_*" -exec rm -rf {} \;
else
  cd /root
  git clone --recursive https://lab.quickbox.io/QuickBox/QuickBox QuickBox
fi
}

function _downloadrepos() {
  echo >>"${OUTTO}" 2>&1;
  cd /root/QuickBox
  git pull >>"${OUTTO}" 2>&1;
  echo
  echo -n "quickbox_setup              :: " >>"${OUTTO}" 2>&1;
    cd ${local_setup} && git checkout master
    git pull >>"${OUTTO}" 2>&1;
  echo -n "quickbox_rutorrent          :: " >>"${OUTTO}" 2>&1;
    cd ${local_rutorrent} && git checkout master
    git pull >>"${OUTTO}" 2>&1;
  echo -n "quickbox_rutorrent-plugins  :: " >>"${OUTTO}" 2>&1;
    cd ${local_rplugins} && git checkout master
    git pull >>"${OUTTO}" 2>&1;
  echo -n "quickbox_packages           :: " >>"${OUTTO}" 2>&1;
    cd ${local_packages} && git checkout master
    git pull >>"${OUTTO}" 2>&1;
  echo -n "quickbox_dashboard          :: " >>"${OUTTO}" 2>&1;
    cd ${local_dashboard} && git checkout master
    git pull >>"${OUTTO}" 2>&1;
}

function _bashrc() {
  cp ${local_setup}templates/bashrc.template /root/.bashrc
}

function _updatequota(){
  sed -i 's/usrquota,errors=remount-ro/usrjquota=aquota.user,jqfmt=vfsv1,errors=remount-ro/g' /etc/fstab
  service quota restart
}

function _checklocks() {
  if [[ -f /usr/sbin/repquota ]] && [[ ! -f /install/.quota.lock ]]; then
    touch /install/.quota.lock
  fi
  if [[ ! -f /etc/systemd/system/rtorrent@.service ]]; then
    touch /install/.cron.lock
  fi
}

function _updated() {
  if [[ -f /install/.cron.lock ]]; then
    bash ${local_packages}package/remove/removepackage-cron
  fi
}

function _updatesyscommands() {
  cd ${usrbin}
  cp -r ${local_packages}. ${usrbin}quickbox
  if [[ -f ${usrbin}quickbox/system/changeUserpass ]]; then
    rm ${usrbin}quickbox/system/changeUserpass
  fi
}

function _updateskel() {
  if [[ -d /etc/skel ]]; then
    rm -r /etc/skel
  fi
  mkdir /etc/skel
  cp -r ${local_setup}templates/skel/. /etc/skel
}

function _updateapachealias() {
  cd /etc/apache2/sites-enabled
  if [[ -f aliases-seedbox.conf.orig ]]; then
    rm -r aliases-seedbox.conf.orig
  fi
  mv aliases-seedbox.conf aliases-seedbox.conf.orig
  cp -r ${local_setup}templates/aliases-seedbox.conf.template /etc/apache2/sites-enabled/aliases-seedbox.conf
  sed -i "s/USERNAME/${A1}/g" /etc/apache2/sites-enabled/aliases-seedbox.conf

  if [[ -f /install/.plex.lock ]] && [[ -s /etc/apache2/sites-enabled/plex.conf ]]; then
    PUBLICIP=$(ip route get 8.8.8.8 | awk 'NR==1 {print $NF}')
    cp ${local_setup}templates/plex.conf.template /etc/apache2/sites-enabled/plex.conf
    chown www-data: /etc/apache2/sites-enabled/plex.conf
    a2enmod proxy >/dev/null 2>&1
    sed -i "s/PUBLICIP/${PUBLICIP}/g" /etc/apache2/sites-enabled/plex.conf
  fi

  service apache2 reload  >> /dev/null 2>&1
}

function _updateuserhome() {
  cd /home/"${A1}"/torrents
  if [[ -d rtorrent ]]; then
    cd
  else
    mv deluge /home/"${A1}"/deluge
    cd ..
    mv torrents rtorrent
    rm -rf torrents
    mkdir -p torrents
    mv deluge torrents/deluge
    mv rtorrent torrents/rtorrent
    sed -i "s/directory = \/home\/${A1}\/torrents\//directory = \/home\/${A1}\/torrents\/rtorrent/g" /home/"${A1}"/.rtorrent.rc
    chown -R ${A1}:${A1} /home/${A1}
  fi
  systemctl restart rtorrent@"${A1}".service
}

function _updaterutorrent() {
  cd /srv
  rsync -aP ${local_rutorrent}* rutorrent
}

function _updaterutorrent-plugins() {
  plugins=($(find ${local_rplugins} -maxdepth 1 -type d -printf "%f\n"))
  for i in "${plugins[@]}"; do
    if [[ -d /srv/rutorrent/plugins/$i ]]; then
      if [[ -d /srv/rutorrent/plugins/$i ]]; then rm -rf /srv/rutorrent/plugins/${i}/${i}; fi
      rsync -aP ${local_rplugins}${i} /srv/rutorrent/plugins/
    fi
  done
  cp /srv/rutorrent/home/fileshare/.htaccess /srv/rutorrent/plugins/fileshare/
  cd /srv/rutorrent/home/fileshare/
  rm -rf share.php
  ln -s ../../plugins/fileshare/share.php
}

# function to install dashboard (23)
function _updatedashboard() {
  cd ${rutorrent}
  #if [[ -f ${rutorrent}home/widgets/branding-*.php ]]; then
  if [[ -n $(find /srv/rutorrent/home/db -name "branding-*.php") ]]; then
    rsync -aP --exclude=disk_*.php --exclude=branding-*.php --exclude=share.php ${local_dashboard}* ${rutorrent}home
  else
    rsync -aP --exclude=disk_*.php --exclude=share.php ${local_dashboard}* ${rutorrent}home
  fi

}

function _updatesudo() {
  rm /etc/sudoers
  cp ${local_setup}templates/sudoers.template /etc/sudoers
  awk -v username="${A1}" '/^root/ && !x {print username    " ALL=(ALL:ALL) NOPASSWD: ALL"; x=1} 1' /etc/sudoers > /tmp/sudoers;mv /tmp/sudoers /etc
}

function _updateplexsysd() {
  if [[ -f /etc/init.d/plexmediaserver ]]; then

  OUTTO="/srv/rutorrent/home/db/output.log"
  HOSTNAME1=$(hostname -s)
  PUBLICIP=$(ip route get 8.8.8.8 | awk 'NR==1 {print $NF}')
  local_setup=/root/QuickBox/setup/

  mv /etc/init.d/plexmediaserver /etc/init.d/plexmediaserver.BAK
  cp ${local_setup}templates/sysd/plexmediaserver.template /lib/systemd/system/plexmediaserver.service

  cp ${local_setup}templates/plex.conf.template /etc/apache2/sites-enabled/plex.conf
  chown www-data: /etc/apache2/sites-enabled/plex.conf
  a2enmod proxy >/dev/null 2>&1
  sed -i "s/PUBLICIP/${PUBLICIP}/g" /etc/apache2/sites-enabled/plex.conf

  wget -O - http://shell.ninthgate.se/packages/shell.ninthgate.se.gpg.key | apt-key add -
  echo "deb http://shell.ninthgate.se/packages/debian jessie main" > /etc/apt/sources.list.d/plexmediaserver.list
  apt-get -y update >/dev/null 2>&1

  systemctl daemon-reload >/dev/null 2>&1
  service plexmediaserver stop
  systemctl enable plexmediaserver.service >/dev/null 2>&1
  systemctl stop plexmediaserver.service >/dev/null 2>&1
  systemctl start plexmediaserver.service >/dev/null 2>&1
  service apache2 restart >/dev/null 2>&1

  fi
}

#function _updatecronfile() {
  # We'll disable this function unless a new packages
  # is included or startup requires a fix.
  #cp ${local_setup}templates/startup.template /home/"${A1}"/.startup
#}

# adjust permissions function (9)
function _perms() {
  chown -R www-data ${rutorrent}*
  chgrp -R www-data ${rutorrent}*
  chmod -R g+rw ${rutorrent}*
  sh -c 'find /srv/rutorrent/* -type d -print0 | sudo xargs -0 chmod g+s'
  chmod +x /etc/cron.d/set_interface
  find /home/*/.config/deluge -name "auth" -exec chmod 600 {} \;
  find /usr/local/bin/quickbox -type f -exec chmod 755 {} \;
  chmod +x $(find /usr/local/bin/quickbox -type f) >/dev/null 2>&1
  chmod -R 755 ${rutorrent}plugins/filemanager/scripts
}

function _quickconsole() {
  #if [[ ! -f /etc/systemd/system/shellinabox.service ]]; then
    PUBLICIP=$(ip route get 8.8.8.8 | awk 'NR==1 {print $NF}')

cat >/etc/profile<<EOF
echo ""
echo "Welcome Back !"
echo "  * Dashboard:  https://${PUBLICIP}"
echo "  * Support:    https://plaza.quickbox.io"
echo "  * Roadmap:    https://quickbox.io/roadmap"
echo "  * Donate:     https://quickbox.io/donate"
echo ""
EOF

    apt-get -y install shellinabox >/dev/null 2>&1

    cp ${local_setup}templates/sysd/shellinabox.template /etc/systemd/system/shellinabox.service
    cp ${local_setup}templates/quickconsole/00_QuickConsole.css.template /etc/shellinabox/options-enabled/00_QuickConsole.css
    cp ${local_setup}templates/web-console.conf.template /etc/apache2/sites-enabled/${A1}.console.conf

    sed -i "s/PUBLICIP/${PUBLICIP}/g" /etc/apache2/sites-enabled/${A1}.console.conf
    sed -i "s/USER/${A1}/g" /etc/apache2/sites-enabled/${A1}.console.conf

    chmod +x /etc/shellinabox/options-enabled/00_QuickConsole.css
    chmod 777 /etc/shellinabox/options-enabled/00_QuickConsole.css

    mv /etc/init.d/shellinabox /etc/init.d/shellinabox.BAK

    systemctl enable shellinabox.service >/dev/null 2>&1
    systemctl stop shellinabox.service >/dev/null 2>&1
    systemctl daemon-reload >/dev/null 2>&1
    systemctl start shellinabox.service >/dev/null 2>&1

    service apache2 reload  >> /dev/null 2>&1
    service memcached restart  >> /dev/null 2>&1

  #fi
}

function _fin() {
  service apache2 restart >>/dev/null 2>&1
  source /root/.bashrc >> /dev/null 2>&1
  echo
  echo "[QuickBox] Seedbox & GUI Update Completed ! " >>"${OUTTO}" 2>&1;
  sleep 5

  echo >>"${OUTTO}" 2>&1;
  echo >>"${OUTTO}" 2>&1;
  echo "Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1;

  exit
}


local_setup=/root/QuickBox/setup/
local_packages=/root/QuickBox/packages/
local_rutorrent=/root/QuickBox/rutorrent/
local_rplugins=/root/QuickBox/rtplugins/
local_dashboard=/root/QuickBox/dashboard/

Reth0=$(ifconfig | grep -m 1 "Link encap" | sed 's/[ \t].*//;/^\(lo\|\)$/d' | awk '{ print $1 '});
IFACE=$(echo -n "${Reth0}");
A1=$(cat /srv/rutorrent/home/db/master.txt) >> /dev/null 2>&1
rutorrent=/srv/rutorrent/
usrbin=/usr/local/bin/

# QuickBox Update STRUCTURE
_oscheck
_logcheck
_directorycheck
echo -n "Pulling QuickBox Ecosystem ... " >>"${OUTTO}" 2>&1;_downloadrepos;echo
_bashrc
_quickconsole
echo "Checking locks and adding if necessary ... " >>"${OUTTO}" 2>&1;_checklocks;echo
echo "Checking if cron services should be uninstalled and taking appropriate action ... " >>"${OUTTO}" 2>&1;_updated;echo
echo "Updating QuickBox System Commands & Packages ... " >>"${OUTTO}" 2>&1;_updatesyscommands;echo
echo "Updating the useradd skeleton directories ... " >>"${OUTTO}" 2>&1;_updateskel;echo
echo "Checking apache aliases ... " >>"${OUTTO}" 2>&1;_updateapachealias;echo
echo "Reorganizing home directory of ${A1} ... " >>"${OUTTO}" 2>&1;_updateuserhome;echo
echo "Updating the rutorrent directory ... " >>"${OUTTO}" 2>&1;_updaterutorrent;echo
echo "Updating all rutorrent plugins ... " >>"${OUTTO}" 2>&1;_updaterutorrent-plugins;echo
echo "Updating the QuickBox Dashboard ... " >>"${OUTTO}" 2>&1;_updatedashboard;echo
echo "Updating the QuickBox Sudoers template ... " >>"${OUTTO}" 2>&1;_updatesudo;echo
_updateplexsysd
#echo "Updating ${A1}'s .startup cronfile... " >>"${OUTTO}" 2>&1;_updatecronfile;echo
echo "Adjusting permissions ... " >>"${OUTTO}" 2>&1;_perms;echo
_fin
