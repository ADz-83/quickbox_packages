#!/bin/bash
#
# [Quick Box :: EcoSystem Update Script]
#
# QuickLab:   https://lab.quickbox.io/QuickBox/quickbox_packages
# Local   :   ~/QuickBox/packages
# Author  :   QuickBox.io
# URL     :   https://plaza.quickbox.io
#
# QuickBox Copyright (C) 2016 QuickBox.io
# Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
function _string() { perl -le 'print map {(a..z,A..Z,0..9)[rand 62] } 0..pop' 15 ; }
#################################################################################

function _logcheck() {
  OUTTO=/srv/rutorrent/home/db/output.log
}

function _directorycheck() {
if [[ -d /root/QuickBox ]]; then
  cd /root
  find -type d -name "quickbox_*" -exec rm -rf {} \;
else
  cd /root
  git clone --recursive https://lab.quickbox.io/QuickBox/QuickBox QuickBox
fi
}

function _downloadrepos() {
  echo >>"${OUTTO}" 2>&1;
  cd /root/QuickBox
  git pull >>"${OUTTO}" 2>&1;
  echo
  echo -n "quickbox_setup              :: " >>"${OUTTO}" 2>&1;
    cd ${local_setup} && git checkout master
    git pull >>"${OUTTO}" 2>&1;
  echo -n "quickbox_rutorrent          :: " >>"${OUTTO}" 2>&1;
    cd ${local_rutorrent} && git checkout master
    git pull >>"${OUTTO}" 2>&1;
  echo -n "quickbox_rutorrent-plugins  :: " >>"${OUTTO}" 2>&1;
    cd ${local_rplugins} && git checkout master
    git pull >>"${OUTTO}" 2>&1;
  echo -n "quickbox_packages           :: " >>"${OUTTO}" 2>&1;
    cd ${local_packages} && git checkout master
    git pull >>"${OUTTO}" 2>&1;
  echo -n "quickbox_dashboard          :: " >>"${OUTTO}" 2>&1;
    cd ${local_dashboard} && git checkout master
    git pull >>"${OUTTO}" 2>&1;
}

function _bashrc() {
  cp ${local_setup}templates/bashrc.template /root/.bashrc
}

function _updatequota(){
  sed -i 's/usrquota,errors=remount-ro/usrjquota=aquota.user,jqfmt=vfsv1,errors=remount-ro/g' /etc/fstab
  service quota restart
}

function _checklocks() {
  if [[ -f /usr/sbin/repquota ]] && [[ ! -f /install/.quota.lock ]]; then
    touch /install/.quota.lock
  fi
  if [[ ! -f /etc/systemd/system/rtorrent@.service ]]; then
    touch /install/.cron.lock
  fi
}

function _updatesyscommands() {
  cd ${usrbin}
  cp -R ${local_packages}. ${usrbin}quickbox
  if [[ -f ${usrbin}quickbox/system/changeUserpass ]]; then
    rm ${usrbin}quickbox/system/changeUserpass
  fi
}

function _updateskel() {
  if [[ -d /etc/skel ]]; then
    rm -r /etc/skel
  fi
  mkdir /etc/skel
  cp -R ${local_setup}templates/skel/. /etc/skel
}

function _updaterutorrent() {
  cd /srv
  cp -R ${local_rutorrent}. rutorrent
}

function _updaterutorrent-plugins() {
  cd ${rutorrent}
  cp -R ${local_rplugins}. plugins
  #rsync -aP ${local_rplugins}* plugins
}

# function to install dashboard (23)
function _updatedashboard() {
  cd ${rutorrent}
  #if [[ -f ${rutorrent}home/widgets/branding-*.php ]]; then
  if [[ -n $(find /srv/rutorrent/home/db -name "branding-*.php") ]]; then
    rsync -aP --exclude=disk_*.php --exclude=branding-*.php ${local_dashboard}* ${rutorrent}home
  else
    rsync -aP --exclude=disk_*.php ${local_dashboard}* ${rutorrent}home
  fi

}

function _updatesudo() {
  rm /etc/sudoers
  cp ${local_setup}templates/sudoers.template /etc/sudoers
  awk -v username="${A1}" '/^root/ && !x {print username    " ALL=(ALL:ALL) NOPASSWD: ALL"; x=1} 1' /etc/sudoers > /tmp/sudoers;mv /tmp/sudoers /etc
}

#function _updatecronfile() {
  # We'll disable this function unless a new packages
  # is included or startup requires a fix.
  #cp ${local_setup}templates/startup.template /home/"${A1}"/.startup
#}

# adjust permissions function (9)
function _perms() {
  chown -R www-data ${rutorrent}*
  chgrp -R www-data ${rutorrent}*
  chmod -R g+rw ${rutorrent}*
  sh -c 'find /srv/rutorrent/* -type d -print0 | sudo xargs -0 chmod g+s'
  chmod +x /etc/cron.d/set_interface
  find /home/*/.config/deluge -name "auth" -exec chmod 600 {} \;
  find /home -name ".startup" -exec chmod 775 {} \;
  find /usr/local/bin/quickbox -type f -exec chmod 755 {} \;
  chmod +x $(find /usr/local/bin/quickbox -type f) >/dev/null 2>&1
}

function _updatedeps() {
  if [[ ! -f /bin/ed ]]; then
    apt update -y -q
    apt install -y -q ed
  fi
}

function _fin() {
  source /root/.bashrc >> /dev/null 2>&1
  echo
  echo "[QuickBox] Seedbox & GUI Update Completed ! " >>"${OUTTO}" 2>&1;
  sleep 5

  echo >>"${OUTTO}" 2>&1;
  echo >>"${OUTTO}" 2>&1;
  echo "Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1;

  exit
}


local_setup=/root/QuickBox/setup/
local_packages=/root/QuickBox/packages/
local_rutorrent=/root/QuickBox/rutorrent/
local_rplugins=/root/QuickBox/rtplugins/
local_dashboard=/root/QuickBox/dashboard/

Reth0=$(ifconfig | grep -m 1 "Link encap" | sed 's/[ \t].*//;/^\(lo\|\)$/d' | awk '{ print $1 '});
IFACE=$(echo -n "${Reth0}");
A1=$(cat /srv/rutorrent/home/db/master.txt) >> /dev/null 2>&1
rutorrent=/srv/rutorrent/
usrbin=/usr/local/bin/

# QuickBox Update STRUCTURE
_logcheck
_directorycheck
echo -n "Pulling QuickBox Ecosystem ... " >>"${OUTTO}" 2>&1;_downloadrepos;echo
_bashrc
echo "Checking locks and adding if necessary ... " >>"${OUTTO}" 2>&1;_checklocks;echo
echo "Checking new dependencies and updating as necessary ... " >>"${OUTTO}" 2>&1;_updatedeps;echo
echo "Updating QuickBox System Commands & Packages ... " >>"${OUTTO}" 2>&1;_updatesyscommands;echo
echo "Updating the useradd skeleton directories ... " >>"${OUTTO}" 2>&1;_updateskel;echo
echo "Updating the rutorrent directory ... " >>"${OUTTO}" 2>&1;_updaterutorrent;echo
echo "Updating the QuickBox Dashboard ... " >>"${OUTTO}" 2>&1;_updatedashboard;echo
echo "Updating the QuickBox Sudoers template ... " >>"${OUTTO}" 2>&1;_updatesudo;echo
#echo "Updating ${A1}'s .startup cronfile... " >>"${OUTTO}" 2>&1;_updatecronfile;echo
echo "Adjusting permissions ... " >>"${OUTTO}" 2>&1;_perms;echo
_fin
